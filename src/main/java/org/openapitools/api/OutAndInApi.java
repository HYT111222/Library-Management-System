/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.InlineObject2;
import org.openapitools.model.InlineObject20;
import org.openapitools.model.InlineObject21;
import org.openapitools.model.InlineObject22;
import org.openapitools.model.InlineObject23;
import org.openapitools.model.InlineObject28;
import org.openapitools.model.InlineObject3;
import org.openapitools.model.InlineObject4;
import org.openapitools.model.InlineObject5;
import org.openapitools.model.InlineResponse2002;
import org.openapitools.model.InlineResponse20024;
import org.openapitools.model.InlineResponse20026;
import org.openapitools.model.InlineResponse20027;
import org.openapitools.model.InlineResponse2003;
import org.openapitools.model.InlineResponse20030;
import org.openapitools.model.InlineResponse20031;
import org.openapitools.model.InlineResponse2004;
import org.openapitools.model.InlineResponse2005;
import org.openapitools.model.InlineResponse2006;
import org.openapitools.model.InlineResponse2007;
import org.openapitools.model.InlineResponse2008;
import org.openapitools.model.InlineResponse2009;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-06T16:31:21.921210200+08:00[Asia/Shanghai]")

@Validated
@Api(value = "outAndIn", description = "the outAndIn API")
public interface OutAndInApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /outAndIn/addInOrder : 添加入库单
     * 入库单号前端生成，20230510195801，年月日时分秒
     *
     * @param inlineObject4  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "添加入库单", nickname = "outAndInAddInOrderPost", notes = "入库单号前端生成，20230510195801，年月日时分秒", response = InlineResponse2005.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2005.class) })
    @RequestMapping(value = "/outAndIn/addInOrder",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2005> outAndInAddInOrderPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject4 inlineObject4) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"massage\" : \"massage\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /outAndIn/addOutOrder : 添加出库单
     * 出库单号前端生成，20230510195801，年月日时分秒
     *
     * @param token  (optional)
     * @param inlineObject5  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "添加出库单", nickname = "outAndInAddOutOrderPost", notes = "出库单号前端生成，20230510195801，年月日时分秒", response = InlineResponse2006.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2006.class) })
    @RequestMapping(value = "/outAndIn/addOutOrder",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2006> outAndInAddOutOrderPost(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject5 inlineObject5) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /outAndIn/ExamineIn : 入库单修改
     * 包括修改状态跟内容（订单号、入库交接人、包裹列表，但不一定全部修改），相当于把该订单重写一次 
     *
     * @param token  (optional)
     * @param inlineObject22  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "入库单修改", nickname = "outAndInExamineInPut", notes = "包括修改状态跟内容（订单号、入库交接人、包裹列表，但不一定全部修改），相当于把该订单重写一次 ", response = InlineResponse20024.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20024.class) })
    @RequestMapping(value = "/outAndIn/ExamineIn",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse20024> outAndInExamineInPut(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject22 inlineObject22) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /outAndIn/ExamineOut : 出库单修改
     * 包括修改状态跟内容（订单号、出库交接人、包裹列表，但不一定全部修改），相当于把该订单重写一次
     *
     * @param token  (optional)
     * @param inlineObject23  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "出库单修改", nickname = "outAndInExamineOutPut", notes = "包括修改状态跟内容（订单号、出库交接人、包裹列表，但不一定全部修改），相当于把该订单重写一次", response = InlineResponse20024.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20024.class) })
    @RequestMapping(value = "/outAndIn/ExamineOut",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse20024> outAndInExamineOutPut(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject23 inlineObject23) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/fetchInPeopleNameList : 获取入库人姓名列表
     *
     * @param token  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取入库人姓名列表", nickname = "outAndInFetchInPeopleNameListGet", notes = "", response = InlineResponse2008.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2008.class) })
    @RequestMapping(value = "/outAndIn/fetchInPeopleNameList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2008> outAndInFetchInPeopleNameListGet(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"inPeopleNameList\" : [ \"inPeopleNameList\", \"inPeopleNameList\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/fetchOutPeopleNameList : 获取出库人姓名列表
     *
     * @param token  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取出库人姓名列表", nickname = "outAndInFetchOutPeopleNameListGet", notes = "", response = InlineResponse2009.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2009.class) })
    @RequestMapping(value = "/outAndIn/fetchOutPeopleNameList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2009> outAndInFetchOutPeopleNameListGet(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"outPeopleNameList\" : [ \"outPeopleNameList\", \"outPeopleNameList\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /outAndIn/InDelMultitude : 删除多数量入库单
     * 能删除什么状态的入库单？
     *
     * @param token  (optional)
     * @param inlineObject20  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "删除多数量入库单", nickname = "outAndInInDelMultitudeDelete", notes = "能删除什么状态的入库单？", response = InlineResponse20024.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20024.class) })
    @RequestMapping(value = "/outAndIn/InDelMultitude",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<InlineResponse20024> outAndInInDelMultitudeDelete(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject20 inlineObject20) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/InNeedToEnter : 获取本用户（普通）申请的入库单中状态为待入库的入库单列表
     * 即筛选待入库的入库单，返回参数与获取待审核的入库单一样
     *
     * @param token  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取本用户（普通）申请的入库单中状态为待入库的入库单列表", nickname = "outAndInInNeedToEnterGet", notes = "即筛选待入库的入库单，返回参数与获取待审核的入库单一样", response = InlineResponse20026.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20026.class) })
    @RequestMapping(value = "/outAndIn/InNeedToEnter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20026> outAndInInNeedToEnterGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"inList\" : [ { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" }, { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/InNeedTocheck : 获取待审核的入库单列表
     * 返回参数与入库界面查询一样
     *
     * @param token  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取待审核的入库单列表", nickname = "outAndInInNeedTocheckGet", notes = "返回参数与入库界面查询一样", response = InlineResponse20026.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20026.class) })
    @RequestMapping(value = "/outAndIn/InNeedTocheck",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20026> outAndInInNeedTocheckGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"inList\" : [ { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" }, { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /outAndIn/OutDelMultitude : 删除多数量出库单
     * 能删除什么状态的出库单？
     *
     * @param inlineObject21  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "删除多数量出库单", nickname = "outAndInOutDelMultitudeDelete", notes = "能删除什么状态的出库单？", response = InlineResponse20024.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20024.class) })
    @RequestMapping(value = "/outAndIn/OutDelMultitude",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<InlineResponse20024> outAndInOutDelMultitudeDelete(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject21 inlineObject21) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/OutNeedToOut : 获取本用户（普通）申请的出库单中状态为待出库的出库单列表
     * 即获取状态为待出库的出库单，返回参数与获取待审核的出库单一样
     *
     * @param token  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取本用户（普通）申请的出库单中状态为待出库的出库单列表", nickname = "outAndInOutNeedToOutGet", notes = "即获取状态为待出库的出库单，返回参数与获取待审核的出库单一样", response = InlineResponse20027.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20027.class) })
    @RequestMapping(value = "/outAndIn/OutNeedToOut",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20027> outAndInOutNeedToOutGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"outList\" : [ { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" }, { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/OutNeedTocheck : 获取待审核的出库单
     * 返回参数与出库界面查询一样
     *
     * @param token  (required)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取待审核的出库单", nickname = "outAndInOutNeedTocheckGet", notes = "返回参数与出库界面查询一样", response = InlineResponse20027.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20027.class) })
    @RequestMapping(value = "/outAndIn/OutNeedTocheck",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20027> outAndInOutNeedTocheckGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"outList\" : [ { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" }, { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /outAndIn/searchIn : 入库界面查询
     * 该仓库下的，入库单状态、入库单号、订单号、入库人姓名，不一定全部填写，执行查询前请先判断
     *
     * @param token  (required)
     * @param inlineObject2  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "入库界面查询", nickname = "outAndInSearchInPost", notes = "该仓库下的，入库单状态、入库单号、订单号、入库人姓名，不一定全部填写，执行查询前请先判断", response = InlineResponse2002.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2002.class) })
    @RequestMapping(value = "/outAndIn/searchIn",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2002> outAndInSearchInPost(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject2 inlineObject2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"inList\" : [ { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" }, { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /outAndIn/searchOut : 出库界面查询
     * 出库单状态、出库单号、订单号、出库人姓名，不一定全部填写，执行查询前请先判断
     *
     * @param inlineObject3  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "出库界面查询", nickname = "outAndInSearchOutPost", notes = "出库单状态、出库单号、订单号、出库人姓名，不一定全部填写，执行查询前请先判断", response = InlineResponse2003.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2003.class) })
    @RequestMapping(value = "/outAndIn/searchOut",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2003> outAndInSearchOutPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject3 inlineObject3) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"outList\" : [ { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" }, { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/showIn : 入库界面获取全部
     * 该仓库下所有数据，返回参数与入库界面查询一样
     *
     * @param token 用户鉴权 (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "入库界面获取全部", nickname = "outAndInShowInGet", notes = "该仓库下所有数据，返回参数与入库界面查询一样", response = InlineResponse2004.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2004.class) })
    @RequestMapping(value = "/outAndIn/showIn",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2004> outAndInShowInGet(@ApiParam(value = "用户鉴权" ) @RequestHeader(value="token", required=false) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"inList\" : [ { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" }, { \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"orderID\" : \"orderID\", \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"inPeopleName\" : \"inPeopleName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/showOut : 出库界面获取全部
     * 返回参数与出库界面查询一样
     *
     * @param token 用户鉴权 (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "出库界面获取全部", nickname = "outAndInShowOutGet", notes = "返回参数与出库界面查询一样", response = InlineResponse2003.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2003.class) })
    @RequestMapping(value = "/outAndIn/showOut",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2003> outAndInShowOutGet(@ApiParam(value = "用户鉴权" ) @RequestHeader(value="token", required=false) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"outList\" : [ { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" }, { \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"outTime\" : \"outTime\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/showParcel : 获取正在库中可出库的包裹
     *
     * @param token  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取正在库中可出库的包裹", nickname = "outAndInShowParcelGet", notes = "", response = InlineResponse2007.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse2007.class) })
    @RequestMapping(value = "/outAndIn/showParcel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2007> outAndInShowParcelGet(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"parcelList\" : [ { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" }, { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/singleInOrderDetail : 获取单个入库单详情
     *
     * @param token  (required)
     * @param inID 入库单ID (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取单个入库单详情", nickname = "outAndInSingleInOrderDetailGet", notes = "", response = InlineResponse20030.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20030.class) })
    @RequestMapping(value = "/outAndIn/singleInOrderDetail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20030> outAndInSingleInOrderDetailGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "入库单ID") @Valid @RequestParam(value = "InID", required = false) String inID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inTime\" : \"inTime\", \"inID\" : \"inID\", \"status_code\" : true, \"orderID\" : \"orderID\", \"parcelList\" : [ { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" }, { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" } ], \"inStatus\" : \"inStatus\", \"userName\" : \"userName\", \"managerName\" : \"managerName\", \"inPeopleName\" : \"inPeopleName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /outAndIn/singleOutOrderDetail : 获取单个出库单信息
     *
     * @param token  (required)
     * @param inlineObject28  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "获取单个出库单信息", nickname = "outAndInSingleOutOrderDetailGet", notes = "", response = InlineResponse20031.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20031.class) })
    @RequestMapping(value = "/outAndIn/singleOutOrderDetail",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse20031> outAndInSingleOutOrderDetailGet(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject28 inlineObject28) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true, \"orderID\" : \"orderID\", \"outPeopleName\" : \"outPeopleName\", \"outID\" : \"outID\", \"parcelList\" : [ { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" }, { \"toAddr\" : \"toAddr\", \"fromPhone\" : \"fromPhone\", \"fromPeople\" : \"fromPeople\", \"toPhone\" : \"toPhone\", \"toPeople\" : \"toPeople\", \"fromAddr\" : \"fromAddr\", \"parcelID\" : \"parcelID\" } ], \"outStatus\" : \"outStatus\", \"userName\" : \"userName\", \"managerName\" : \"managerName\", \"outTime\" : \"outTime\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
