/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.InlineObject33;
import org.openapitools.model.InlineObject34;
import org.openapitools.model.InlineObject36;
import org.openapitools.model.InlineResponse20014;
import org.openapitools.model.InlineResponse20015;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-06T16:31:21.921210200+08:00[Asia/Shanghai]")

@Validated
@Api(value = "peopleManger", description = "the peopleManger API")
public interface PeopleMangerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /peopleManger/addCustom : 增加客户及相关信息
     *
     * @param token  (optional)
     * @param inlineObject36  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "增加客户及相关信息", nickname = "peopleMangerAddCustomPost", notes = "", response = InlineResponse20015.class, tags={ "peopleManage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20015.class) })
    @RequestMapping(value = "/peopleManger/addCustom",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse20015> peopleMangerAddCustomPost(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject36 inlineObject36) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /peopleManger/addFetchOutPeople : 增加出库人
     *
     * @param inlineObject34  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "增加出库人", nickname = "peopleMangerAddFetchOutPeoplePost", notes = "", response = InlineResponse20014.class, tags={ "peopleManage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20014.class) })
    @RequestMapping(value = "/peopleManger/addFetchOutPeople",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse20014> peopleMangerAddFetchOutPeoplePost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject34 inlineObject34) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /peopleManger/addInBoundPeople : 增加入库人
     *
     * @param token  (optional)
     * @param inlineObject33  (optional)
     * @return 成功 (status code 200)
     */
    @ApiOperation(value = "增加入库人", nickname = "peopleMangerAddInBoundPeoplePost", notes = "", response = InlineResponse20015.class, tags={ "peopleManage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "成功", response = InlineResponse20015.class) })
    @RequestMapping(value = "/peopleManger/addInBoundPeople",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse20015> peopleMangerAddInBoundPeoplePost(@ApiParam(value = "" ) @RequestHeader(value="token", required=false) String token,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject33 inlineObject33) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_code\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
